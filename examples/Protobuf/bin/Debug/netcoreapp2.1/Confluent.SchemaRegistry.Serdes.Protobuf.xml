<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Confluent.SchemaRegistry.Serdes.Protobuf</name>
    </assembly>
    <members>
        <member name="F:Confluent.SchemaRegistry.Serdes.Constants.MagicByte">
            <summary>
                Magic byte that identifies a message with Confluent Platform framing.
            </summary>
        </member>
        <member name="T:Confluent.SchemaRegistry.Serdes.ProtobufDeserializer`1">
            <summary>
                (async) Protobuf deserializer.
            </summary>
            <remarks>
                Serialization format:
                  byte 0:           A magic byte that identifies this as a message with
                                    Confluent Platform framing.
                  bytes 1-4:        Unique global id of the Protobuf schema that was used
                                    for encoding (as registered in Confluent Schema Registry),
                                    big endian.
                  following bytes:  1. A size-prefixed array of indices that identify the
                                       specific message type in the schema (a given schema
                                       can contain many message types and they can be nested).
                                       Size and indices are unsigned varints. The common case
                                       where the message type is the first message in the
                                       schema (i.e. index data would be [1,0]) is encoded as
                                       a single 0 byte as an optimization.
                                    2. The protobuf serialized data.
            </remarks>
        </member>
        <member name="M:Confluent.SchemaRegistry.Serdes.ProtobufDeserializer`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
                Initialize a new ProtobufDeserializer instance.
            </summary>
            <param name="config">
                Deserializer configuration properties (refer to 
                <see cref="T:Confluent.SchemaRegistry.Serdes.ProtobufDeserializerConfig" />).
            </param>
        </member>
        <member name="M:Confluent.SchemaRegistry.Serdes.ProtobufDeserializer`1.DeserializeAsync(System.ReadOnlyMemory{System.Byte},System.Boolean,Confluent.Kafka.SerializationContext)">
            <summary>
                Deserialize an object of type <typeparamref name="T"/>
                from a byte array.
            </summary>
            <param name="data">
                The raw byte data to deserialize.
            </param>
            <param name="isNull">
                True if this is a null value.
            </param>
            <param name="context">
                Context relevant to the deserialize operation.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> that completes
                with the deserialized value.
            </returns>
        </member>
        <member name="T:Confluent.SchemaRegistry.Serdes.ProtobufDeserializerConfig">
            <summary>
                <see cref="T:Confluent.SchemaRegistry.Serdes.ProtobufDeserializer`1" />
                configuration properties.
            </summary>
        </member>
        <member name="T:Confluent.SchemaRegistry.Serdes.ProtobufSerializer`1">
            <summary>
                Protobuf Serializer.
            </summary>
            <remarks>
                Serialization format:
                  byte 0:           A magic byte that identifies this as a message with
                                    Confluent Platform framing.
                  bytes 1-4:        Unique global id of the Protobuf schema that was used
                                    for encoding (as registered in Confluent Schema Registry),
                                    big endian.
                  following bytes:  1. A size-prefixed array of indices that identify the
                                       specific message type in the schema (a given schema
                                       can contain many message types and they can be nested).
                                       Size and indices are unsigned varints. The common case
                                       where the message type is the first message in the
                                       schema (i.e. index data would be [1,0]) is encoded as
                                       a single 0 byte as an optimization.
                                    2. The protobuf serialized data.
            </remarks>
        </member>
        <member name="F:Confluent.SchemaRegistry.Serdes.ProtobufSerializer`1.schemaId">
            <remarks>
                A given schema is uniquely identified by a schema id, even when
                registered against multiple subjects.
            </remarks>
        </member>
        <member name="M:Confluent.SchemaRegistry.Serdes.ProtobufSerializer`1.#ctor(Confluent.SchemaRegistry.ISchemaRegistryClient,Confluent.SchemaRegistry.Serdes.ProtobufSerializerConfig)">
            <summary>
                Initialize a new instance of the ProtobufSerializer class.
            </summary>
        </member>
        <member name="M:Confluent.SchemaRegistry.Serdes.ProtobufSerializer`1.RegisterOrGetReferences(Google.Protobuf.Reflection.FileDescriptor,Confluent.Kafka.SerializationContext,System.Boolean)">
            <remarks>
                note: protobuf does not support circular file references, so this possibility isn't considered.
            </remarks>
        </member>
        <member name="M:Confluent.SchemaRegistry.Serdes.ProtobufSerializer`1.SerializeAsync(`0,Confluent.Kafka.SerializationContext)">
            <summary>
                Serialize an instance of type <typeparamref name="T"/> to a byte array
                in Protobuf format. The serialized data is preceeded by:
                  1. A "magic byte" (1 byte) that identifies this as a message with
                     Confluent Platform framing.
                  2. The id of the schema as registered in Confluent's Schema Registry
                     (4 bytes, network byte order).
                  3. An size-prefixed array of indices that identify the specific message
                     type in the schema (a given schema can contain many message types
                     and they can be nested). Size and indices are unsigned varints. The
                     common case where the message type is the first message in the schema
                     (i.e. index data would be [1,0]) is encoded as simply a single 0 byte
                     as an optimization.
                This call may block or throw on first use for a particular topic during
                schema registration / verification.
            </summary>
            <param name="value">
                The value to serialize.
            </param>
            <param name="context">
                Context relevant to the serialize operation.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> that completes with 
                <paramref name="value" /> serialized as a byte array.
            </returns>
        </member>
        <member name="T:Confluent.SchemaRegistry.Serdes.ProtobufSerializerConfig">
            <summary>
                <see cref="T:Confluent.SchemaRegistry.Serdes.ProtobufSerializer`1" />
                configuration properties.
            </summary>
        </member>
        <member name="T:Confluent.SchemaRegistry.Serdes.ProtobufSerializerConfig.PropertyNames">
            <summary>
                Configuration property names specific to 
                <see cref="T:Confluent.SchemaRegistry.Serdes.ProtobufSerializer`1" />.
            </summary>
        </member>
        <member name="F:Confluent.SchemaRegistry.Serdes.ProtobufSerializerConfig.PropertyNames.BufferBytes">
             <summary>
                 Specifies the initial size (in bytes) of the buffer used for Protobuf message
                 serialization. Use a value high enough to avoid resizing the buffer, but
                 small enough to avoid excessive memory use. Inspect the size of the byte
                 array returned by the Serialize method to estimate an appropriate value.
                 Note: each call to serialize creates a new buffer.
            
                 default: 1024
             </summary>
        </member>
        <member name="F:Confluent.SchemaRegistry.Serdes.ProtobufSerializerConfig.PropertyNames.AutoRegisterSchemas">
             <summary>
                 Specifies whether or not the Protobuf serializer should attempt to auto-register
                 unrecognized schemas with Confluent Schema Registry.
            
                 default: true
             </summary>
        </member>
        <member name="F:Confluent.SchemaRegistry.Serdes.ProtobufSerializerConfig.PropertyNames.SubjectNameStrategy">
            <summary>
                The subject name strategy to use for schema registration / lookup.
                Possible values: <see cref="T:Confluent.SchemaRegistry.SubjectNameStrategy" />
            </summary>
        </member>
        <member name="F:Confluent.SchemaRegistry.Serdes.ProtobufSerializerConfig.PropertyNames.ReferenceSubjectNameStrategy">
            <summary>
                The subject name strategy to use for registration / lookup of referenced schemas
                Possible values: <see cref="T:Confluent.SchemaRegistry.ReferenceSubjectNameStrategy" />
            </summary>
        </member>
        <member name="M:Confluent.SchemaRegistry.Serdes.ProtobufSerializerConfig.#ctor">
            <summary>
                Initialize a new <see cref="T:Confluent.SchemaRegistry.Serdes.ProtobufSerializerConfig" />.
            </summary>
        </member>
        <member name="M:Confluent.SchemaRegistry.Serdes.ProtobufSerializerConfig.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
                Initialize a new <see cref="T:Confluent.SchemaRegistry.Serdes.ProtobufSerializerConfig" /> from the provided
                key/value pair collection.
            </summary>
        </member>
        <member name="P:Confluent.SchemaRegistry.Serdes.ProtobufSerializerConfig.BufferBytes">
            <summary>
                Specifies the initial size (in bytes) of the buffer used for Protobuf message
                serialization. Use a value high enough to avoid resizing the buffer, but
                small enough to avoid excessive memory use. Inspect the size of the byte
                array returned by the Serialize method to estimate an appropriate value.
                Note: each call to serialize creates a new buffer.
            
                default: 1024
            </summary>
        </member>
        <member name="P:Confluent.SchemaRegistry.Serdes.ProtobufSerializerConfig.AutoRegisterSchemas">
             <summary>
                 Specifies whether or not the Protobuf serializer should attempt to auto-register
                 unrecognized schemas with Confluent Schema Registry.
            
                 default: true
             </summary>
        </member>
        <member name="P:Confluent.SchemaRegistry.Serdes.ProtobufSerializerConfig.SubjectNameStrategy">
            <summary>
                Subject name strategy.
                
                default: SubjectNameStrategy.Topic
            </summary>
        </member>
        <member name="P:Confluent.SchemaRegistry.Serdes.ProtobufSerializerConfig.ReferenceSubjectNameStrategy">
            <summary>
                Reference subject name strategy.
                
                default: ReferenceSubjectNameStrategy.ReferenceName
            </summary>
        </member>
        <member name="M:Confluent.SchemaRegistry.Serdes.Utils.WriteUnsignedVarint(System.IO.Stream,System.UInt32)">
            <remarks>
                Inspired by: https://github.com/apache/kafka/blob/2.5/clients/src/main/java/org/apache/kafka/common/utils/ByteUtils.java#L284
            </remarks>
        </member>
        <member name="M:Confluent.SchemaRegistry.Serdes.Utils.ReadUnsignedVarint(System.IO.Stream)">
            <remarks>
                Inspired by: https://github.com/apache/kafka/blob/2.5/clients/src/main/java/org/apache/kafka/common/utils/ByteUtils.java#L142
            </remarks>
        </member>
    </members>
</doc>
